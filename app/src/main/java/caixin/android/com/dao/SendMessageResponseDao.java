package caixin.android.com.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import caixin.android.com.entity.SendMessageResponse.ImageList_Converter;
import caixin.android.com.entity.SendMessageResponse.ImgBean;

import caixin.android.com.entity.SendMessageResponse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEND_MESSAGE_RESPONSE".
*/
public class SendMessageResponseDao extends AbstractDao<SendMessageResponse, Long> {

    public static final String TABLENAME = "SEND_MESSAGE_RESPONSE";

    /**
     * Properties of entity SendMessageResponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property SendId = new Property(2, int.class, "sendId", false, "SEND_ID");
        public final static Property Manager = new Property(3, int.class, "manager", false, "MANAGER");
        public final static Property HeadImg = new Property(4, String.class, "headImg", false, "HEAD_IMG");
        public final static Property GetId = new Property(5, int.class, "getId", false, "GET_ID");
        public final static Property GroupId = new Property(6, int.class, "groupId", false, "GROUP_ID");
        public final static Property GroupImage = new Property(7, String.class, "groupImage", false, "GROUP_IMAGE");
        public final static Property Pbgid = new Property(8, int.class, "pbgid", false, "PBGID");
        public final static Property AssignType = new Property(9, int.class, "assignType", false, "ASSIGN_TYPE");
        public final static Property Pid = new Property(10, int.class, "pid", false, "PID");
        public final static Property Uid = new Property(11, int.class, "uid", false, "UID");
        public final static Property Totype = new Property(12, int.class, "totype", false, "TOTYPE");
        public final static Property GroupName = new Property(13, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Contents = new Property(14, String.class, "contents", false, "CONTENTS");
        public final static Property Addtime = new Property(15, String.class, "addtime", false, "ADDTIME");
        public final static Property Togroups = new Property(16, String.class, "togroups", false, "TOGROUPS");
        public final static Property Isread = new Property(17, int.class, "isread", false, "ISREAD");
        public final static Property NikeName = new Property(18, String.class, "nikeName", false, "NIKE_NAME");
        public final static Property Touids = new Property(19, String.class, "touids", false, "TOUIDS");
        public final static Property Updatetime = new Property(20, String.class, "updatetime", false, "UPDATETIME");
        public final static Property AssignTo = new Property(21, String.class, "assignTo", false, "ASSIGN_TO");
        public final static Property Red_status = new Property(22, boolean.class, "red_status", false, "RED_STATUS");
        public final static Property Tag = new Property(23, String.class, "tag", false, "TAG");
        public final static Property MessageId = new Property(24, int.class, "messageId", false, "MESSAGE_ID");
        public final static Property Is_zl = new Property(25, int.class, "is_zl", false, "IS_ZL");
        public final static Property Unread = new Property(26, int.class, "unread", false, "UNREAD");
        public final static Property Sort = new Property(27, int.class, "sort", false, "SORT");
        public final static Property Replay_pid = new Property(28, int.class, "replay_pid", false, "REPLAY_PID");
        public final static Property Replystatus = new Property(29, int.class, "replystatus", false, "REPLYSTATUS");
        public final static Property Reply = new Property(30, String.class, "reply", false, "REPLY");
        public final static Property Reply_data = new Property(31, String.class, "reply_data", false, "REPLY_DATA");
    }

    private final ImageList_Converter imgConverter = new ImageList_Converter();

    public SendMessageResponseDao(DaoConfig config) {
        super(config);
    }
    
    public SendMessageResponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEND_MESSAGE_RESPONSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMG\" TEXT," + // 1: img
                "\"SEND_ID\" INTEGER NOT NULL ," + // 2: sendId
                "\"MANAGER\" INTEGER NOT NULL ," + // 3: manager
                "\"HEAD_IMG\" TEXT," + // 4: headImg
                "\"GET_ID\" INTEGER NOT NULL ," + // 5: getId
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 6: groupId
                "\"GROUP_IMAGE\" TEXT," + // 7: groupImage
                "\"PBGID\" INTEGER NOT NULL ," + // 8: pbgid
                "\"ASSIGN_TYPE\" INTEGER NOT NULL ," + // 9: assignType
                "\"PID\" INTEGER NOT NULL ," + // 10: pid
                "\"UID\" INTEGER NOT NULL ," + // 11: uid
                "\"TOTYPE\" INTEGER NOT NULL ," + // 12: totype
                "\"GROUP_NAME\" TEXT," + // 13: groupName
                "\"CONTENTS\" TEXT," + // 14: contents
                "\"ADDTIME\" TEXT," + // 15: addtime
                "\"TOGROUPS\" TEXT," + // 16: togroups
                "\"ISREAD\" INTEGER NOT NULL ," + // 17: isread
                "\"NIKE_NAME\" TEXT," + // 18: nikeName
                "\"TOUIDS\" TEXT," + // 19: touids
                "\"UPDATETIME\" TEXT," + // 20: updatetime
                "\"ASSIGN_TO\" TEXT," + // 21: assignTo
                "\"RED_STATUS\" INTEGER NOT NULL ," + // 22: red_status
                "\"TAG\" TEXT," + // 23: tag
                "\"MESSAGE_ID\" INTEGER NOT NULL ," + // 24: messageId
                "\"IS_ZL\" INTEGER NOT NULL ," + // 25: is_zl
                "\"UNREAD\" INTEGER NOT NULL ," + // 26: unread
                "\"SORT\" INTEGER NOT NULL ," + // 27: sort
                "\"REPLAY_PID\" INTEGER NOT NULL ," + // 28: replay_pid
                "\"REPLYSTATUS\" INTEGER NOT NULL ," + // 29: replystatus
                "\"REPLY\" TEXT," + // 30: reply
                "\"REPLY_DATA\" TEXT);"); // 31: reply_data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEND_MESSAGE_RESPONSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SendMessageResponse entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        ImgBean img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, imgConverter.convertToDatabaseValue(img));
        }
        stmt.bindLong(3, entity.getSendId());
        stmt.bindLong(4, entity.getManager());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
        stmt.bindLong(6, entity.getGetId());
        stmt.bindLong(7, entity.getGroupId());
 
        String groupImage = entity.getGroupImage();
        if (groupImage != null) {
            stmt.bindString(8, groupImage);
        }
        stmt.bindLong(9, entity.getPbgid());
        stmt.bindLong(10, entity.getAssignType());
        stmt.bindLong(11, entity.getPid());
        stmt.bindLong(12, entity.getUid());
        stmt.bindLong(13, entity.getTotype());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(14, groupName);
        }
 
        String contents = entity.getContents();
        if (contents != null) {
            stmt.bindString(15, contents);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(16, addtime);
        }
 
        String togroups = entity.getTogroups();
        if (togroups != null) {
            stmt.bindString(17, togroups);
        }
        stmt.bindLong(18, entity.getIsread());
 
        String nikeName = entity.getNikeName();
        if (nikeName != null) {
            stmt.bindString(19, nikeName);
        }
 
        String touids = entity.getTouids();
        if (touids != null) {
            stmt.bindString(20, touids);
        }
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(21, updatetime);
        }
 
        String assignTo = entity.getAssignTo();
        if (assignTo != null) {
            stmt.bindString(22, assignTo);
        }
        stmt.bindLong(23, entity.getRed_status() ? 1L: 0L);
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(24, tag);
        }
        stmt.bindLong(25, entity.getMessageId());
        stmt.bindLong(26, entity.getIs_zl());
        stmt.bindLong(27, entity.getUnread());
        stmt.bindLong(28, entity.getSort());
        stmt.bindLong(29, entity.getReplay_pid());
        stmt.bindLong(30, entity.getReplystatus());
 
        String reply = entity.getReply();
        if (reply != null) {
            stmt.bindString(31, reply);
        }
 
        String reply_data = entity.getReply_data();
        if (reply_data != null) {
            stmt.bindString(32, reply_data);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SendMessageResponse entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        ImgBean img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, imgConverter.convertToDatabaseValue(img));
        }
        stmt.bindLong(3, entity.getSendId());
        stmt.bindLong(4, entity.getManager());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
        stmt.bindLong(6, entity.getGetId());
        stmt.bindLong(7, entity.getGroupId());
 
        String groupImage = entity.getGroupImage();
        if (groupImage != null) {
            stmt.bindString(8, groupImage);
        }
        stmt.bindLong(9, entity.getPbgid());
        stmt.bindLong(10, entity.getAssignType());
        stmt.bindLong(11, entity.getPid());
        stmt.bindLong(12, entity.getUid());
        stmt.bindLong(13, entity.getTotype());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(14, groupName);
        }
 
        String contents = entity.getContents();
        if (contents != null) {
            stmt.bindString(15, contents);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(16, addtime);
        }
 
        String togroups = entity.getTogroups();
        if (togroups != null) {
            stmt.bindString(17, togroups);
        }
        stmt.bindLong(18, entity.getIsread());
 
        String nikeName = entity.getNikeName();
        if (nikeName != null) {
            stmt.bindString(19, nikeName);
        }
 
        String touids = entity.getTouids();
        if (touids != null) {
            stmt.bindString(20, touids);
        }
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(21, updatetime);
        }
 
        String assignTo = entity.getAssignTo();
        if (assignTo != null) {
            stmt.bindString(22, assignTo);
        }
        stmt.bindLong(23, entity.getRed_status() ? 1L: 0L);
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(24, tag);
        }
        stmt.bindLong(25, entity.getMessageId());
        stmt.bindLong(26, entity.getIs_zl());
        stmt.bindLong(27, entity.getUnread());
        stmt.bindLong(28, entity.getSort());
        stmt.bindLong(29, entity.getReplay_pid());
        stmt.bindLong(30, entity.getReplystatus());
 
        String reply = entity.getReply();
        if (reply != null) {
            stmt.bindString(31, reply);
        }
 
        String reply_data = entity.getReply_data();
        if (reply_data != null) {
            stmt.bindString(32, reply_data);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SendMessageResponse readEntity(Cursor cursor, int offset) {
        SendMessageResponse entity = new SendMessageResponse( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : imgConverter.convertToEntityProperty(cursor.getString(offset + 1)), // img
            cursor.getInt(offset + 2), // sendId
            cursor.getInt(offset + 3), // manager
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headImg
            cursor.getInt(offset + 5), // getId
            cursor.getInt(offset + 6), // groupId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // groupImage
            cursor.getInt(offset + 8), // pbgid
            cursor.getInt(offset + 9), // assignType
            cursor.getInt(offset + 10), // pid
            cursor.getInt(offset + 11), // uid
            cursor.getInt(offset + 12), // totype
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // groupName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // contents
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // addtime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // togroups
            cursor.getInt(offset + 17), // isread
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // nikeName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // touids
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // updatetime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // assignTo
            cursor.getShort(offset + 22) != 0, // red_status
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // tag
            cursor.getInt(offset + 24), // messageId
            cursor.getInt(offset + 25), // is_zl
            cursor.getInt(offset + 26), // unread
            cursor.getInt(offset + 27), // sort
            cursor.getInt(offset + 28), // replay_pid
            cursor.getInt(offset + 29), // replystatus
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // reply
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31) // reply_data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SendMessageResponse entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : imgConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setSendId(cursor.getInt(offset + 2));
        entity.setManager(cursor.getInt(offset + 3));
        entity.setHeadImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGetId(cursor.getInt(offset + 5));
        entity.setGroupId(cursor.getInt(offset + 6));
        entity.setGroupImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPbgid(cursor.getInt(offset + 8));
        entity.setAssignType(cursor.getInt(offset + 9));
        entity.setPid(cursor.getInt(offset + 10));
        entity.setUid(cursor.getInt(offset + 11));
        entity.setTotype(cursor.getInt(offset + 12));
        entity.setGroupName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setContents(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAddtime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTogroups(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsread(cursor.getInt(offset + 17));
        entity.setNikeName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTouids(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUpdatetime(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAssignTo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRed_status(cursor.getShort(offset + 22) != 0);
        entity.setTag(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setMessageId(cursor.getInt(offset + 24));
        entity.setIs_zl(cursor.getInt(offset + 25));
        entity.setUnread(cursor.getInt(offset + 26));
        entity.setSort(cursor.getInt(offset + 27));
        entity.setReplay_pid(cursor.getInt(offset + 28));
        entity.setReplystatus(cursor.getInt(offset + 29));
        entity.setReply(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setReply_data(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SendMessageResponse entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SendMessageResponse entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SendMessageResponse entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
