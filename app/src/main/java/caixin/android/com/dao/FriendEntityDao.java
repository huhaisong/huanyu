package caixin.android.com.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import caixin.android.com.entity.FriendEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_ENTITY".
*/
public class FriendEntityDao extends AbstractDao<FriendEntity, Long> {

    public static final String TABLENAME = "FRIEND_ENTITY";

    /**
     * Properties of entity FriendEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property Is_gl = new Property(2, int.class, "is_gl", false, "IS_GL");
        public final static Property Lastacttime = new Property(3, String.class, "lastacttime", false, "LASTACTTIME");
        public final static Property NikeName = new Property(4, String.class, "nikeName", false, "NIKE_NAME");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property Tzstatus = new Property(6, int.class, "tzstatus", false, "TZSTATUS");
        public final static Property Layout_type = new Property(7, int.class, "layout_type", false, "LAYOUT_TYPE");
        public final static Property Letter = new Property(8, String.class, "letter", false, "LETTER");
        public final static Property Tag = new Property(9, String.class, "tag", false, "TAG");
        public final static Property IsSelected = new Property(10, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property IsJoined = new Property(11, boolean.class, "isJoined", false, "IS_JOINED");
        public final static Property Mobile = new Property(12, String.class, "mobile", false, "MOBILE");
        public final static Property Session_id = new Property(13, String.class, "session_id", false, "SESSION_ID");
        public final static Property Remind = new Property(14, int.class, "remind", false, "REMIND");
        public final static Property Totype = new Property(15, int.class, "totype", false, "TOTYPE");
        public final static Property IsBlack = new Property(16, int.class, "isBlack", false, "IS_BLACK");
        public final static Property Signature = new Property(17, String.class, "signature", false, "SIGNATURE");
    }


    public FriendEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FriendEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"IMG\" TEXT," + // 1: img
                "\"IS_GL\" INTEGER NOT NULL ," + // 2: is_gl
                "\"LASTACTTIME\" TEXT," + // 3: lastacttime
                "\"NIKE_NAME\" TEXT," + // 4: nikeName
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"TZSTATUS\" INTEGER NOT NULL ," + // 6: tzstatus
                "\"LAYOUT_TYPE\" INTEGER NOT NULL ," + // 7: layout_type
                "\"LETTER\" TEXT," + // 8: letter
                "\"TAG\" TEXT," + // 9: tag
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 10: isSelected
                "\"IS_JOINED\" INTEGER NOT NULL ," + // 11: isJoined
                "\"MOBILE\" TEXT," + // 12: mobile
                "\"SESSION_ID\" TEXT," + // 13: session_id
                "\"REMIND\" INTEGER NOT NULL ," + // 14: remind
                "\"TOTYPE\" INTEGER NOT NULL ," + // 15: totype
                "\"IS_BLACK\" INTEGER NOT NULL ," + // 16: isBlack
                "\"SIGNATURE\" TEXT);"); // 17: signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
        stmt.bindLong(3, entity.getIs_gl());
 
        String lastacttime = entity.getLastacttime();
        if (lastacttime != null) {
            stmt.bindString(4, lastacttime);
        }
 
        String nikeName = entity.getNikeName();
        if (nikeName != null) {
            stmt.bindString(5, nikeName);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getTzstatus());
        stmt.bindLong(8, entity.getLayout_type());
 
        String letter = entity.getLetter();
        if (letter != null) {
            stmt.bindString(9, letter);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(10, tag);
        }
        stmt.bindLong(11, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsJoined() ? 1L: 0L);
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(13, mobile);
        }
 
        String session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindString(14, session_id);
        }
        stmt.bindLong(15, entity.getRemind());
        stmt.bindLong(16, entity.getTotype());
        stmt.bindLong(17, entity.getIsBlack());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(18, signature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
        stmt.bindLong(3, entity.getIs_gl());
 
        String lastacttime = entity.getLastacttime();
        if (lastacttime != null) {
            stmt.bindString(4, lastacttime);
        }
 
        String nikeName = entity.getNikeName();
        if (nikeName != null) {
            stmt.bindString(5, nikeName);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getTzstatus());
        stmt.bindLong(8, entity.getLayout_type());
 
        String letter = entity.getLetter();
        if (letter != null) {
            stmt.bindString(9, letter);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(10, tag);
        }
        stmt.bindLong(11, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsJoined() ? 1L: 0L);
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(13, mobile);
        }
 
        String session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindString(14, session_id);
        }
        stmt.bindLong(15, entity.getRemind());
        stmt.bindLong(16, entity.getTotype());
        stmt.bindLong(17, entity.getIsBlack());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(18, signature);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public FriendEntity readEntity(Cursor cursor, int offset) {
        FriendEntity entity = new FriendEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img
            cursor.getInt(offset + 2), // is_gl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastacttime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nikeName
            cursor.getInt(offset + 5), // status
            cursor.getInt(offset + 6), // tzstatus
            cursor.getInt(offset + 7), // layout_type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // letter
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tag
            cursor.getShort(offset + 10) != 0, // isSelected
            cursor.getShort(offset + 11) != 0, // isJoined
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mobile
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // session_id
            cursor.getInt(offset + 14), // remind
            cursor.getInt(offset + 15), // totype
            cursor.getInt(offset + 16), // isBlack
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // signature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIs_gl(cursor.getInt(offset + 2));
        entity.setLastacttime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNikeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setTzstatus(cursor.getInt(offset + 6));
        entity.setLayout_type(cursor.getInt(offset + 7));
        entity.setLetter(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsSelected(cursor.getShort(offset + 10) != 0);
        entity.setIsJoined(cursor.getShort(offset + 11) != 0);
        entity.setMobile(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSession_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRemind(cursor.getInt(offset + 14));
        entity.setTotype(cursor.getInt(offset + 15));
        entity.setIsBlack(cursor.getInt(offset + 16));
        entity.setSignature(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
